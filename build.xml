<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    General purpose build script for web applications and web services,
    including enhanced support for deploying directly to a Tomcat
    based server.

    This build script assumes that the source code of your web application
    is organized into the following subdirectories underneath the source
    code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web application.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.
-->

<!--
    A "project" describes a set of targets that may be requested
    when Ant is executed.  The "default" attribute defines the
    target which is executed if no specific target is requested,
    and the "basedir" attribute defines the current working directory
    from which Ant executes the requested task.  This is normally
    set to the current working directory.
-->

<project name="My Project" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">


<!-- ===================== Property Definitions =========================== -->

<!--
    Each of the following properties are used in the build script.
    Values for these properties are set by the first place they are
    defined, from the following list:

        * Definitions on the "ant" command line (ant -Dfoo=bar compile).

        * Definitions from a "build.properties" file in the top level
          source directory of this application.

        * Definitions from a "build.properties" file in the developer's
          home directory.

        * Default definitions in this build.xml file.

    You will note below that property values can be composed based on the
    contents of previously defined properties.  This is a powerful technique
    that helps you minimize the number of changes required when your
    development environment is modified.  Note that property composition is
    allowed within "build.properties" files as well as in the "build.xml"
    script.
-->

    <property file="build.properties"/>
    <property file="${user.home}/build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

<!--
    These properties generally define file and directory names (or paths) that
    affect where the build process stores its outputs.

    app.name             Base name of this application, used to
                         construct filenames and directories.
                         Defaults to "myapp".

    app.path             Context path to which this application should be
                         deployed (defaults to "/" plus the value of the
                         "app.name" property).

    app.version          Version number of this iteration of the application.

    build.home           The directory into which the "prepare" and
                         "compile" targets will generate their output.
                         Defaults to "build".

    catalina.home        The directory in which you have installed
                         a binary distribution of Tomcat.  This will
                         be used by the "deploy" target.

    dist.home            The name of the base directory in which
                         distribution files are created.
                         Defaults to "dist".

    manager.password     The login password of a user that is assigned the
                         "manager-script" role (so that he or she can execute
                         commands via the "/manager" web application)

    manager.url          The URL of the "/manager" web application on the
                         Tomcat installation to which we will deploy web
                         applications and web services.

    manager.username     The login username of a user that is assigned the
                         "manager-script" role (so that he or she can execute
                         commands via the "/manager" web application)
-->

    <property name="app.name"              value="myapp"/>
    <property name="app.path"              value="/${app.name}"/>
    <property name="app.version"           value="0.1-dev"/>
    <property name="build.home"            value="${basedir}/build"/>
    <property name="lib.home"              value="${basedir}/lib"/>
    <property name="pre.catalina.home"     value="${basedir}/tomee"/>
    <property name="catalina.home"         value="${pre.catalina.home}/apache-tomee-plume-10.1.1"/>
    <property name="dist.home"             value="${basedir}/dist"/>
    <property name="docs.home"             value="${basedir}/docs"/>
    <property name="manager.url"           value="http://localhost:8080/manager/text"/>
    <property name="src.home"              value="${basedir}/src"/>
    <property name="web.home"              value="${basedir}/web"/>
    <property name="meta.home"             value="${basedir}/META-INF"/>
    <property name="conf.home"             value="${basedir}/conf"/>
    <property name="catalina.bin.home"     value="${catalina.home}/bin"/>
    <property name="ant.home"              value="C:/ant/apache-ant-1.10.15"/>
    <property name="ant.lib.home"          value="${ant.home}/lib"/>


<!-- ==================== External Dependencies =========================== -->

<!--
    Use property values to define the locations of external JAR files on which
    your application will depend.  In general, these values will be used for
    two purposes:

        * Inclusion on the classpath that is passed to the Javac compiler

        * Being copied into the "/WEB-INF/lib" directory during execution
          of the "deploy" target.

    Because we will automatically include all of the Java classes that Tomcat
    exposes to web applications, we will not need to explicitly list any of
    those dependencies.  You only need to worry about external dependencies for
    JAR files that you are going to include inside your "/WEB-INF/lib"
    directory.
-->

<!--
    <property name="foo.jar"
              value="/path/to/foo.jar"/>
-->


<!-- ==================== Compilation Classpath =========================== -->

<!--
    Rather than relying on the CLASSPATH environment variable, Ant includes
    features that make it easy to dynamically construct the classpath you
    need for each compilation. The example below constructs the compile
    classpath to include the servlet.jar file, as well as the other components
    that Tomcat makes available to web applications automatically, plus
    anything that you explicitly added.
-->

    <path id="compile.classpath">

        <fileset dir="${catalina.home}/bin">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${catalina.home}/lib"/>

        <fileset dir="${catalina.home}/lib">
            <include name="*.jar"/>
        </fileset>

        <pathelement location="${lib.home}"/>

        <fileset dir="${lib.home}">
            <include name="*.jar"/>
        </fileset>

    </path>


<!-- ========================= Ant Classpath ============================== -->

<!--
    Use this for taskdef-s.
-->

    <path id="ant.classpath">

        <fileset dir="${ant.lib.home}">
            <include name="*.jar"/>
        </fileset>

    </path>


<!-- ================== Custom Ant Task Definitions ======================= -->

<!--
    These properties define custom tasks for the Ant build tool that interact
    with the "/manager" web application installed with Tomcat.  Before they
    can be successfully utilized, you must perform the following steps:

        * Copy the file "lib/catalina-ant.jar" from your Tomcat
          installation into the "lib" directory of your Ant installation.

        * Create a "build.properties" file in your application's top-level
          source directory (or your user login home directory) that defines
          appropriate values for the "manager.password", "manager.url", and
          "manager.username" properties described above.

    For more information about the Manager web application, and the
    functionality of these tasks, see
    <http://localhost:8080/tomcat-docs/manager-howto.html>.
-->

<!--
    <taskdef resource="org/apache/catalina/ant/catalina.tasks"
             classpathref="compile.classpath"/>
-->

    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpathref="ant.classpath"/>


<!--  ==================== Compilation Control Options ==================== -->

<!--
    These properties control option settings on the Javac compiler when it
    is invoked using the <javac> task.

        compile.debug        Should compilation include the debug option?

        compile.deprecation  Should compilation include the deprecation option?
-->

    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>


<!-- ==================== Clean Target ==================================== -->

<!--
    The "clean" target deletes any previous "build" and "dist" directory,
    so that you can be ensured the application can be built from scratch.
-->

    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${build.home}"/>
        <delete dir="${lib.home}"/>
        <delete dir="${dist.home}"/>
        <delete dir="${pre.catalina.home}"/>
    </target>


<!-- ==================== Compile Target ================================== -->

<!--
    The "compile" target transforms source files (from your "src" directory)
    into object files in the appropriate location in the build directory.
    This example assumes that you will be including your classes in an
    unpacked directory hierarchy under "/WEB-INF/classes".
-->

    <target name="compile"
            depends="prepare,resolve"
            description="Compile Java sources">

        <mkdir dir="${build.home}/WEB-INF/classes"/>
        <javac srcdir="${src.home}"
               destdir="${build.home}/WEB-INF/classes"
               debug="${compile.debug}"
               deprecation="${compile.deprecation}">
            <classpath refid="compile.classpath"/>
        </javac>

        <copy todir="${build.home}/WEB-INF/classes">
            <fileset dir="${src.home}" excludes="**/*.java"/>
        </copy>

        <mkdir dir="${build.home}/WEB-INF/classes/META-INF"/>

        <copy todir="${build.home}/WEB-INF/classes/META-INF">
            <fileset dir="${meta.home}"/>
        </copy>

    </target>



<!-- ==================== Dist Target ===================================== -->

<!--
    The "dist" target creates a binary distribution of your application
    in a directory structure ready to be archived in a tar.gz or zip file.
    Note that this target depends on two others:

        * "compile" so that the entire web application (including external
          dependencies) will have been assembled

        * "javadoc" so that the application Javadocs will have been created
-->

    <target name="dist"
            depends="compile,javadoc"
            description="Create binary distribution">

        <!-- Copy documentation subdirectories -->
        <mkdir dir="${dist.home}/docs"/>
        <copy todir="${dist.home}/docs">
            <fileset dir="${docs.home}"/>
        </copy>

        <!-- Create application JAR file -->
        <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
             basedir="${build.home}"/>

  </target>


<!-- ==================== Javadoc Target ================================== -->

<!--
    The "javadoc" target creates Javadoc API documentation for the Java
    classes included in your application.  Normally, this is only required
    when preparing a distribution release, but is available as a separate
    target in case the developer wants to create Javadocs independently.
-->

    <target name="javadoc"
            depends="compile"
            description="Create Javadoc API documentation">

        <mkdir dir="${dist.home}/docs/api"/>
        <javadoc sourcepath="${src.home}"
                 destdir="${dist.home}/docs/api"
                 packagenames="*">
            <classpath refid="compile.classpath"/>
        </javadoc>

    </target>


<!-- ==================== Prepare Target ================================== -->

<!--
    The "prepare" target is used to create the "build" destination directory,
    and copy the static contents of your web application to it.  If you need
    to copy static files from external dependencies, you can customize the
    contents of this task.

    Normally, this task is executed indirectly when needed.
-->

    <target name="prepare" depends="allow-remote-debugging">

        <mkdir dir="${build.home}"/>
        <mkdir dir="${build.home}/WEB-INF"/>
        <mkdir dir="${build.home}/WEB-INF/classes"/>

        <copy todir="${build.home}">
            <fileset dir="${web.home}"/>
        </copy>

        <mkdir dir="${build.home}/WEB-INF/lib"/>

    </target>


<!-- ==================== Download Tomee Target =========================== -->

<!--
    The "download tomee" target downloads Tomee.
-->

    <target name="download-tomee" depends="clean">
        <mkdir dir="${pre.catalina.home}"/>
        <get src="https://dlcdn.apache.org/tomee/tomee-10.1.1/apache-tomee-10.1.1-plume.zip"
             dest="${pre.catalina.home}/apache-tomee.zip"
             verbose="true"/>
        <unzip src="${pre.catalina.home}/apache-tomee.zip"
               dest="${pre.catalina.home}"/>
    </target>


<!-- =================== Allow Remote Debugging Target ==================== -->

<!--
    The "allow remote debugging" target inserts a line in the catalina.bat
    script to allow remote debugging.
-->

    <target name="allow-remote-debugging" depends="download-tomee">
        <groovy>
            def file = new File("${properties['catalina.bin.home']}/catalina.bat")
            def lines = file.readLines()
            def pattern = ~/set "JAVA_OPTS=%JAVA_OPTS% --add-opens=java\.[^"]*"/
            def idx = lines.findLastIndexOf { it =~ pattern }
            if (idx >= 0) {
                lines.add(idx + 1, 'set "JAVA_OPTS=%JAVA_OPTS% -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"')
                file.text = lines.join(System.lineSeparator())
            }
        </groovy>
    </target>


<!-- ==================== Deploy To Tomee Target ========================== -->

<!--
    The "deploy to tomee" target copies the necessary files to the TomEE area.
-->

    <target name="deploy-to-tomee"
            description="Copy necessary files to TomEE area">
        <copy todir="${catalina.home}/webapps" overwrite="true">
            <fileset dir="${dist.home}" includes="*.war"/>
        </copy>
        <copy todir="${catalina.home}/lib" overwrite="true">
            <fileset dir="${lib.home}" includes="*.jar"/>
        </copy>

        <copy todir="${catalina.home}/conf" overwrite="true">
            <fileset dir="${conf.home}"/>
        </copy>
    </target>


<!-- ==================== Resolve Target ========================== -->

<!--
    The "resolve" target downloads the Ivy dependencies into lib.home.
-->

    <target name="resolve" description="Retreive dependencies with ivy">
        <ivy:retrieve/>
    </target>


</project>
